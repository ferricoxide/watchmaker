name: Release version and publish package

on:
  workflow_run:
    workflows: ["Build and test"]
    types: [completed]

concurrency:
  group: release-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Retrieve artifacts after build and test run
  check-artifacts:
    name: Check artifacts from build run
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      actions: read  # Required to download artifacts from other workflow runs
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: dists
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Retrieve standalone binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: standalone-*
          path: .pyinstaller/dist
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: dists
          path: dist/
          if-no-files-found: error
          retention-days: 1

      - name: Upload standalone binaries
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: standalone-binaries
          path: .pyinstaller/dist
          if-no-files-found: error
          retention-days: 1

  # Create release
  release-publish:
    if: |
      github.event.workflow_run.event != 'pull_request' &&
      github.event.workflow_run.head_branch == github.event.repository.default_branch
    name: Create release and publish package
    runs-on: ubuntu-latest
    needs:
      - check-artifacts
    permissions:
      actions: read  # Required to download artifacts from other workflow runs
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    env:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: source
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Retrieve release distributions
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: dists
          path: dist/

      - name: Retrieve standalone binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: standalone-binaries
          path: .pyinstaller/dist

      - name: Create GitHub release
        id: release
        uses: plus3it/actions-workflows/.github/actions/release@1c7909107a55325d40d2f12f29029c73a38c45c3
        with:
          release-token: "${{ secrets.GH_RELEASES_TOKEN }}"
          release-files: |
            dist/*
            .pyinstaller/dist/**/*

      - run: ls -al dist/
      - run: ls -alR .pyinstaller/dist/

      - name: Publish package distributions to PyPI
        if: steps.release.outputs.release-condition == 'true'
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc

      - name: Install aws-cli
        uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
        with:
          role-to-assume: "${{ secrets.AWS_ROLE_ARN }}"
          aws-region: "${{ env.AWS_DEFAULT_REGION }}"

      - name: Validate credential
        run: aws sts get-caller-identity

      - name: Publish standalone binaries to S3
        env:
          BUCKET: "${{ steps.release.outputs.release-condition != 'true' && vars.DEV_BUCKET || vars.RELEASE_BUCKET }}"
        run: aws s3 cp --recursive .pyinstaller/dist/ s3://${{ env.BUCKET }}/${{ vars.S3_PREFIX }}/

      - name: Generate scan reports
        env:
          BUCKET: "${{ steps.release.outputs.release-condition != 'true' && vars.DEV_BUCKET || vars.RELEASE_BUCKET }}"
        run: bash ci/codebuild_start_wait.sh ${{ vars.CODEBUILD_PROJECT }} s3://${{ env.BUCKET }}/${{ vars.S3_PREFIX}}/$APP_VERSION/scans
